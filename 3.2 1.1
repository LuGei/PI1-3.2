/*
    Nummer: 207 & 217
    Name, Vorname, Matrikel-Nr.:
    Name, Vorname, Matrikel-Nr.:
    Aufgabenbeschreibung:   3.2
    Datum:  11.1.2019
    Version:    1.1
*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define GROESSE_FELD 6
#define DIM_ZEILE GROESSE_FELD * 2 + 1
#define DIM_SPALTE (GROESSE_FELD+1) * 2 + 1

//ersetze alle x durch leerzeichen
void viergewinntVorlage (char **spielfeld){
    char zeichenX='x';
    int i=1;
    char* pz=NULL;

    for(i=0;i<DIM_ZEILE;i++){
        while((pz=strchr(spielfeld[i],zeichenX))){
            *pz=' ';
        }
    }
}

//gibt die letzte zeile in der angegebenen spalte zurück die kein leerzeichen ist
int getLastZeile(char **spielfeld, int spalte){
    int last=1;
    char zeichenL=' ';
    for(last=DIM_ZEILE-2; last>0; last=last-2){
        if(spielfeld[last][spalte]==zeichenL){
            return last;
        }
    }
    return -1;
}



//pruefe den spielstand
int vierGewinntCheck(char **spielfeld, char spielstein){
    int z,s;
    int waage=0;
    int vert=0;
    int cross=0;
    int gewonnen=0;
    int full=0;

 //checke senkrecht
    for(s=1;s<DIM_SPALTE;s=s+2){
        for(z=1;z<DIM_ZEILE;z=z+2){
            if(spielfeld[z][s]==spielstein){
                vert++;
            }
            else if(vert!=4){
                vert=0;
            }
        }
        if (vert==4){
                printf("gewonnen\n");
                gewonnen=1;
        }
        else{
            vert=0;
        }
    }
    //checke waagerecht
    for(z=1;z<DIM_ZEILE;z=z+2){
        for(s=1;s<DIM_SPALTE;s=s+2){
            if(spielfeld[z][s]==spielstein){
                waage++;
            }
            else if(waage!=4){
                waage=0;
            }
        }
        if (waage==4){
                printf("gewonnen\n");
                gewonnen=1;
        }else{
            waage=0;
        }
    }


//checke cross l
    s=1;
    for(z=7;z>=1;z=z-2){
        if(spielfeld[z][s]==spielstein){
            cross++;
            s=s+2;
        }
    }
    if (cross==4){
        gewonnen=1;
    }
    else{
        cross=0;
    }
    cross=0;

//checke cross r
    s=7;
    for(z=7;z>=1;z=z-2){
        if(spielfeld[z][s]==spielstein){
            cross++;
            s=s-2;
        }
    }
    if (cross==4){
        gewonnen=1;
    }

//pruefe auf unentschieden
    for(s=1;s<DIM_SPALTE;s=s+2){
        if(spielfeld[1][s]!=' '){
            full++;
        }
    }
    if(full==GROESSE_FELD&&gewonnen==0){
        return -1;
    }

//pruefe auf gewinn
    if(gewonnen==1){
        return 1;
    }
    else{
//spiele weiter
        return 0;
    }

}




//baue spielfeld auf
void spielGeruest(char **spielfeld){
    int i = 0, j = 0;
    for(i = 0; i < (DIM_ZEILE); i++){
        for(j = 0; j < (DIM_SPALTE); j++){
            if(!(i%2)){
                if(!(j%2)){
                    spielfeld[i][j] = '|';  //alle geraden felder
                }
                else{
                    spielfeld[i][j] = '-';  //alle ungeraden felder
                }
            }
            else{
                if(!(j%2)){
                    spielfeld[i][j] = '|';  //alle geraden felder
                }
                else{
                    spielfeld[i][j] = 'x';  //alle ungeraden felder
                }
            }
        }
    }
}

    //ausgabe des spielfelds
void ausgabeSpielfeld(char **spielfeld){

    int i;
//gebe alle zeilen aus
    for(i=0;i<DIM_ZEILE;i++){
        printf("%s\n",spielfeld[i]);
    }



}

    //reserierung des speichers
int main(){
    char c;
    char **spielfeld = NULL;
    int i;
    int spielstand;
    int spalte, zeile;
    int aktuellerspieler=0;
    char* player = NULL;
    player = (char*) malloc(sizeof(char)*2);


    //reserviere speicher für alle Zeilen
    spielfeld = (char**)malloc(sizeof(char*)* DIM_ZEILE);
    for(i=0;i<DIM_SPALTE;i++){
        //reserviere in jeder Zeile nochmal platz für DIM_SPALTE spalten
        spielfeld[i] = (char*)malloc(sizeof(char)* DIM_SPALTE);
        //unnötige Zeile, ersetzung von malloc durch calloc initialisiert direkt mit 0
        spielfeld[i][DIM_SPALTE]=0;
    }

    //eingabe der werte ins spielfeld
    spielGeruest(spielfeld);

    viergewinntVorlage(spielfeld);


    //eingabeaufforderung
    printf("Player 1\n waehlen sie ihren Spielstein und bestaetigen sie mit der Enter taste\n");
    player[aktuellerspieler]=getchar();
    int temp = getchar();
    aktuellerspieler=1-aktuellerspieler;
    do{
        printf("Player 2\n waehlen sie ihren Spielstein und bestaetigen sie mit der Enter taste\n");
        player[aktuellerspieler]=getchar();
        temp = getchar();
        //pruefe auf korrekte eingabe
        if(player[0]==player[1]){
            printf("das macht keinen Sinn, nimm einen anderen\n");
        }
    }while(player[0]==player[1]);

    //Spieler 1 soll anfangen
    aktuellerspieler = 1-aktuellerspieler;

    do{
        //ausgabe spielfeld
        printf("\n 1 2 3 4 5 6 7 8 9 \n");
        ausgabeSpielfeld(spielfeld);



        //eingabe des spielsteins und spielerwechsel und ueberpruefung auf spielstand
            //spieler 1 fängt an


            //eingabeaufforderung
            do{
                printf("In welche Spalte hätten sie es denn gerne?\n");
                spalte = getchar()-48;
                while ((c = getchar()) != '\n' && c != EOF) { }
                //pruefe auf korrekte eingabe

                spalte = spalte*2-1;

                if((spalte<1)||(spalte>DIM_SPALTE)){
                    printf("\n\tAußerhalb des Spielbereichs\n");
                }
                else if((zeile=getLastZeile(spielfeld,spalte))==-1){
                    printf("\n\n\tDiese Spalte ist voll!\n\n");
                }
                else{
                    break;
                }


            }while(spalte<1||spalte>DIM_SPALTE||spalte%2==0||zeile==-1);

            //setze spielstein


            if(zeile>=0&&zeile<DIM_ZEILE){
                spielfeld[zeile][spalte]=player[aktuellerspieler];
            }
            //pruefe ob der letzte Zug das Spiel entschieden hat
            spielstand=vierGewinntCheck(spielfeld,player[aktuellerspieler]);
            if (spielstand!=0){
                break;
            }

            //spieler wechsel
            aktuellerspieler=1-aktuellerspieler;






    }while(1);

    //ausgabe spielfeld
    printf("012345678\n");
    ausgabeSpielfeld(spielfeld);





    //gebe ergebnis aus
    if(spielstand==1){
        switch(aktuellerspieler){
            case 0: printf("Spieler 1 hat gewonnen.");
                    break;
            case 1: printf("Spieler 2 hat gewonnen.");
                    break;
        }
    }
    else{
        printf("Unentschieden");
    }

    for(i=0;i<DIM_SPALTE;i++){
        spielfeld[i]=NULL;
    }

    //mache speicher wieder frei
    for(i=0;i<DIM_SPALTE;i++) {
        free(spielfeld[i]);
    }
    spielfeld = NULL;
    free(spielfeld);


}
